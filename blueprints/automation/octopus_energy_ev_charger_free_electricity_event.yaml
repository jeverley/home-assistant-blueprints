blueprint:
  name: Octopus Energy - EV Charger Free Electricity Override
  description: >
    Starts a charge override during free electricity sessions if the EV charger is in Smart mode
    and the cost of starting early is lower than the cost of missing the sync window.
  domain: automation
  source_url: https://raw.githubusercontent.com/jeverley/home-assistant-blueprints/refs/heads/main/blueprints/automation/octopus_energy_ev_charger_free_electricity_event.yaml
  input:
    event_calendar:
      name: Free Electricity Session Calendar
      description: Calendar entity that tracks free electricity sessions or events
      selector:
        entity:
          domain:
            - calendar
    current_rate_sensor:
      name: Current Electricity Rate Sensor
      description: Sensor that provides the current electricity rate per kWh
      selector:
        entity:
          domain: sensor
    next_rate_sensor:
      name: Next Electricity Rate Sensor
      description: Sensor that provides the next period's electricity rate per kWh for cost comparison
      selector:
        entity:
          domain: sensor
    charger_type:
      name: EV Charger Type
      description: Select the type of EV charger you are using
      selector:
        select:
          mode: dropdown
          options:
            - PodPoint

    pod_point:
      name: PodPoint Charger Settings
      collapsed: true
      description: Configuration for your PodPoint EV charger
      input:
        pp_charge_speed_kwh:
          name: Charge Speed
          description: The charging speed of the EV charger in kilowatts per hour
          default: 7
          selector:
            number:
              min: 1
              max: 22
              unit_of_measurement: kWh
              mode: slider
        pp_charge_mode_sensor:
          name: Charge Mode Sensor
          description: Sensor that reports the current operating mode of your EV charger (e.g., Smart, Manual)
          default: []
          selector:
            entity:
              filter:
                domain: sensor
                integration: pod_point
        pp_override_end_sensor:
          name: Charge Override End Time Sensor
          description: Sensor that indicates when the current charge override will end
          default: []
          selector:
            entity:
              filter:
                domain: sensor
                integration: pod_point
        pp_last_message_sensor:
          name: Last Message Received Sensor
          description: Sensor that tracks when the EV charger last communicated or updated its status
          default: []
          selector:
            entity:
              filter:
                domain: sensor
                integration: pod_point
        pp_interval_minutes:
          name: Charger Update Interval
          description: How often the charger syncs or updates its status
          default: 5
          selector:
            number:
              min: 1
              max: 30
              unit_of_measurement: minutes
              mode: slider

    advanced:
      name: Advanced Settings
      collapsed: true
      input:
        min_duration_seconds:
          name: Minimum Override Duration
          description: The minimum duration for a charge override to be worthwhile (prevents very short overrides)
          default: 60
          selector:
            number:
              min: 10
              max: 3600
              unit_of_measurement: seconds
              mode: slider
        end_offset_seconds:
          name: Session End Offset
          description: Buffer time before the free electricity session ends to account for system delays
          default: 10
          selector:
            number:
              min: 0
              max: 300
              unit_of_measurement: seconds
              mode: slider

trigger_variables:
  event_calendar: !input event_calendar
  current_rate_sensor: !input current_rate_sensor
  next_rate_sensor: !input next_rate_sensor
  charger_type: !input charger_type
  min_duration_seconds: !input min_duration_seconds
  end_offset_seconds: !input end_offset_seconds
  pp_charge_speed_kwh: !input pp_charge_speed_kwh
  pp_charge_mode_sensor: !input pp_charge_mode_sensor
  pp_last_message_sensor: !input pp_last_message_sensor
  pp_override_end_sensor: !input pp_override_end_sensor
  pp_interval_minutes: !input pp_interval_minutes
  last_update_sensor: |
    {% if charger_type == 'PodPoint' %}
    {{ pp_last_message_sensor }}
    {% endif %}
  update_interval: |
    {% if charger_type == 'PodPoint' %}
    {{ timedelta(minutes=pp_interval_minutes) }}
    {% endif %}
  charge_speed_kwh: |
    {% if charger_type == 'PodPoint' %}
    {{ pp_charge_speed_kwh }}
    {% endif %}

variables:
  min_duration: "{{ timedelta(seconds=min_duration_seconds) }}"
  end_offset: "{{ timedelta(seconds=end_offset_seconds) }}"
  event_end: |
    {{ as_datetime(state_attr(event_calendar, 'end_time'), none) }}
  duration: |
    {{ (event_end - now() - end_offset) if event_end else timedelta(0) }}
  pp_config_entry_id: "{{ config_entry_id(pp_charge_mode_sensor) }}"

triggers:
  - alias: Cost-based sync window trigger
    id: Start
    platform: template
    value_template: >-
      {% set start = as_datetime(state_attr(event_calendar, 'start_time'), none) %}
      {% set current_kwh_cost = float(states(current_rate_sensor), none) %}
      {% set charger_last_update = as_datetime(states(last_update_sensor), none) if last_update_sensor else none %}

      {% if not start %}
        {{ false }}
      {% elif start <= now() %}
        {{ true }}
      {% elif charger_last_update and current_kwh_cost is not none and charge_speed_kwh is not none %}
        {% set ev_update_1 = charger_last_update + update_interval %}
        {% set ev_update_2 = charger_last_update + update_interval * 2 %}

        {% if ev_update_1 < start < ev_update_2 %}
          {% set next_kwh_cost = float(states(next_rate_sensor), none) %}
          {% set min_kwh_cost = min(current_kwh_cost, next_kwh_cost) if next_kwh_cost is not none else current_kwh_cost %}
          {% set missed_time = ev_update_2 - start %}
          {% set missed_kwh = missed_time.total_seconds() / 3600 * charge_speed_kwh %}
          {% set missed_min_cost = missed_kwh * min_kwh_cost %}
          {% set early_time = start - ev_update_1 %}
          {% set early_kwh = early_time.total_seconds() / 3600 * charge_speed_kwh %}
          {% set early_cost = early_kwh * current_kwh_cost %}
          {{ early_cost < missed_min_cost }}
        {% else %}
          {{ false }}
        {% endif %}
      {% endif %}
  - alias: PodPoint Schedule mode change
    id: ModeChange
    platform: state
    entity_id: !input pp_charge_mode_sensor
    to: Smart
    enabled: "{{ charger_type == 'PodPoint' }}"

conditions:
  - alias: If the EV charger is in schedule mode
    condition: state
    entity_id: !input pp_charge_mode_sensor
    state: Smart
    enabled: "{{ charger_type == 'PodPoint' }}"
  - alias: No override or event ends after current override
    condition: template
    value_template: >-
      {% set override_end = as_datetime(states(override_end_sensor), none) %}
      {{ override_end is none or (event_end and event_end > override_end + end_offset) }}
    enabled: "{{ charger_type == 'PodPoint' }}"
  - condition: or
    conditions:
      - alias: If there is an active event
        condition: state
        entity_id: !input event_calendar
        state: "on"
      - condition: trigger
        id: Start

action:
  - alias: Start a charge override for the remainder of the free energy session
    choose:
      - conditions:
          - alias: If the charger type is PodPoint
            condition: template
            value_template: "{{ charger_type == 'PodPoint' }}"
          - alias: If the duration is longer than the minimum
            condition: template
            value_template: "{{ duration > min_duration }}"
        sequence:
          - action: pod_point.charge_now
            metadata: {}
            data:
              config_entry_id: "{{ pp_config_entry_id }}"
              seconds: "{{ duration.total_seconds() | int % 60 }}"
              minutes: "{{ (duration.total_seconds() | int % 3600) // 60 }}"
              hours: "{{ duration.total_seconds() | int // 3600 }}"

mode: single
