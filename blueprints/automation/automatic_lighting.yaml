blueprint:
  name: Automatic lights control
  description: |
    Controls lighting based on occupancy, illuminance, and manual activity. 
    Supports restoration of lighting conditions after the area is unoccupied. Designed
    to be compatible with the HACS Adaptive Lighting integration.
  domain: automation
  input:
    area:
      name: Area
      description: This is used to determine which lights to control.
      selector:
        area:
          multiple: false
    occupancy_sensor:
      name: Occupancy sensor
      description: The occupancy sensor that detects presence in the area.
        This can be a binary sensor with device class occupancy, presence, or motion.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - binary_sensor
              device_class:
                - occupancy
                - presence
                - motion
    area_occupied_delay:
      name: Area occupied delay
      description: The duration to wait before considering the area occupied.
      default: 0
      selector:
        number:
          min: 0.0
          max: 120.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    area_unoccupied_delay:
      name: Area unoccupied delay
      description: The duration to wait before considering the area unoccupied.
      default: 60
      selector:
        number:
          min: 0.0
          max: 120.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    transition_on:
      name: Lights on transition
      description:
        The default transition time for turning lights on. This helps in
        providing a smooth lighting change experience.
      default: 1
      selector:
        number:
          min: 0.0
          max: 30.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    transition_off:
      name: Lights off transition
      description:
        The default transition time for turning lights off. This helps
        in providing a smooth lighting change experience.
      default: 2
      selector:
        number:
          min: 0.0
          max: 30.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    automatic_control_helper:
      name: Automatic control helper (optional)
      description:
        A toggle/switch/binary sensor for controlling automatic lighting
        control. If not provided, the automation will always be active.
      default:
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - input_boolean
                - switch
                - binary_sensor
    automatic_control_reset_duration:
      name: Automatic control reset (optional)
      description: The duration after which the automatic control will be re-enabled.
      default: 04:00:00
      selector:
        time: {}
    control_reset_transition:
      name: Control reset transition (optional)
      description: The transition time for lights when control is reset.
      default: 10
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    physical_control_lights:
      name: Physical control lights (optional)
      description:
        Physical control of these lights will pause/resume automatic control
        if the room is occupied, this requires the automatic control helper to be
        an input_boolean or switch entity.
      default: []
      selector:
        entity:
          multiple: true
          filter:
            - domain:
                - light
    physical_control_transition:
      name: Physical control transition (optional)
      description: The transition time for lights triggered by manual control.
      default: 1
      selector:
        number:
          min: 0.0
          max: 30.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    area_exit_control_reset_duration:
      name: Area exit control reset duration (optional)
      description:
        Re-enable control if the area was unoccupied for this duration
        after the lights were physically turned off
      default:
      selector:
        time: {}
    advanced_options:
      name: Advanced Options
      icon: mdi:cog
      description: Advanced configuration for controlling lights behaviour.
      collapsed: true
      input:
        area_lights:
          name: Area lights (optional)
          description: Manually specify lights that should be controlled in the area.
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain:
                    - light
        lights_on_scene:
          name: Lights on scene (optional)
          description:
            A scene can be activated instead of turning on the area's lights.
            This can be used to apply specific lighting conditions.
          default:
          selector:
            entity:
              multiple: false
              filter:
                - domain:
                    - scene
        lights_off_scene:
          name: Lights off scene (optional)
          description:
            A scene can be activated instead of turning off the area's lights.
            This can be used to apply specific lighting conditions.
          default:
          selector:
            entity:
              multiple: false
              filter:
                - domain:
                    - scene
    scene_options:
      name: Scene Restoration
      icon: mdi:lamps
      description:
        Parameters for controlling scene restoration after someone re-enters
        the area.
      collapsed: true
      input:
        scene_timeout:
          name: Scene timeout
          description:
            The duration after which a saved scene is not restored after
            area re-entry.
          default: 00:05:00
          selector:
            time: {}
        scene_timeout_helper:
          name: Scene timeout helper (optional)
          description:
            A time-only datetime entity for specifying scene timeout, if
            defined this is used instead of the timeout parameter.
          default:
          selector:
            entity:
              multiple: false
              filter:
                - domain:
                    - input_datetime
    illuminance_options:
      name: Illuminance Options
      icon: mdi:brightness-5
      description:
        Optional parameters for using illuminance state to influence lighting
        control.
      collapsed: true
      input:
        illuminance_sensor:
          name: Illuminance sensor (optional)
          description: The illuminance sensor that measures light levels in the area.
          default: []
          selector:
            entity:
              multiple: false
              filter:
                - domain:
                    - sensor
                  device_class:
                    - illuminance
        illuminance_minimum:
          name: Lights on illuminance
          description:
            The minimum illuminance level, below which the lights will
            be turned on. This helps in ensuring that the area is adequately lit when
            it is dark.
          default: 1500
          selector:
            number:
              min: 0.0
              max: 10000.0
              unit_of_measurement: lx
              step: 1.0
              mode: slider
        illuminance_minimum_duration:
          name: Lights on illuminance duration
          description:
            The duration that Illuminance must be below the threshold to
            trigger a change.
          default: 5
          selector:
            number:
              min: 0.0
              max: 60.0
              unit_of_measurement: s
              step: 1.0
              mode: slider
        illuminance_on_transition:
          name: Illuminance lights on transition
          description:
            The transition time for turning on lights when illuminance falls below the minimum level.
            This allows for a gradual adjustment of lighting based on ambient light levels.
          default: 10
          selector:
            number:
              min: 0.0
              max: 60.0
              unit_of_measurement: s
              step: 1.0
              mode: slider
        illuminance_maximum:
          name: Lights off illuminance
          description:
            The maximum illuminance level, above which the lights will
            be turned off. This helps in preventing over-illumination when there is
            sufficient natural light.
          default: 3000
          selector:
            number:
              min: 0.0
              max: 10000.0
              unit_of_measurement: lx
              step: 1.0
              mode: slider
        illuminance_maximum_duration:
          name: Lights off illuminance duration
          description:
            The duration that Illuminance must be above the threshold to
            trigger a change.
          default: 15
          selector:
            number:
              min: 0.0
              max: 60.0
              unit_of_measurement: s
              step: 1.0
              mode: slider
        illuminance_off_transition:
          name: Illuminance lights off transition
          description:
            The transition time for turning on lights when illuminance rises above the maximum level.
            This allows for a gradual adjustment of lighting based on ambient light levels.
          default: 30
          selector:
            number:
              min: 0.0
              max: 60.0
              unit_of_measurement: s
              step: 1.0
              mode: slider
    cover_options:
      name: Cover Shading Options
      icon: mdi:roller-shade
      description:
        Optional parameters for using cover state to influence lighting
        control. If not provided, the automation will not consider cover position.
      collapsed: true
      input:
        cover:
          name: Cover (optional)
          description:
            If provided the automation will consider the cover position
            when controlling the lights.
          default: []
          selector:
            entity:
              multiple: false
              filter:
                - domain:
                    - cover
        cover_shading_position:
          name: Cover shading position
          description:
            The lights will always be turned on when the cover is below
            this position and the area is occupied.
          default: 0
          selector:
            number:
              min: 0.0
              max: 100.0
              unit_of_measurement: "%"
              step: 1.0
              mode: slider
        cover_shading_when_closing:
          name: Cover is shading when closing
          description: The cover will be considered shading whilst in the closing state
          default: false
          selector:
            boolean:
    routine_options:
      name: Routine Options
      icon: mdi:clock-fast
      description:
        Optional parameters for using routine state to influence lighting
        control. If not provided, the automation will not consider routine changes.
      collapsed: true
      input:
        routine_sensor:
          name: Routine sensor (optional)
          description:
            A sensor/select entity which determines the current routine
            (e.g. waking, awake, bedtime, sleep).
          default:
          selector:
            entity:
              multiple: false
              filter:
                - domain:
                    - sensor
                    - select
        control_reset_trigger_routine_states:
          name: Control reset trigger states (optional)
          description: Routine states that re-enable automatic control.
          default: []
          selector:
            text:
              multiple: true
              multiline: false
        control_reset_permitted_routine_states:
          name: Routine states that permit automatic control reset (optional)
          description:
            Routine states that allow automatic control to be reset, if
            not provided any routine state will permit the reset.
          default: []
          selector:
            text:
              multiple: true
              multiline: false
  source_url: https://raw.githubusercontent.com/jeverley/home-assistant-blueprints/refs/heads/main/blueprints/automation/automatic_lighting.yaml

trigger_variables:
  area: !input area
  area_lights: !input area_lights
  occupancy_sensor: !input occupancy_sensor
  transition_on: !input transition_on
  transition_off: !input transition_off
  lights_on_scene: !input lights_on_scene
  lights_off_scene: !input lights_off_scene
  automatic_control_helper: !input automatic_control_helper
  physical_control_lights: !input physical_control_lights
  physical_control_transition: !input physical_control_transition
  is_control_toggleable: |
    {{ automatic_control_helper|contains('input_boolean.') or automatic_control_helper|contains('switch.') }}
  automatic_control_reset_duration: !input automatic_control_reset_duration
  area_exit_control_reset_duration: !input area_exit_control_reset_duration
  scene_id: "{{ area + '_saved' }}"
  scene_entity: "{{ 'scene.' + scene_id }}"
  scene_timeout_helper: !input scene_timeout_helper
  scene_timeout: !input scene_timeout
  illuminance_sensor: !input illuminance_sensor
  illuminance_minimum: !input illuminance_minimum
  illuminance_minimum_duration: !input illuminance_minimum_duration
  illuminance_maximum: !input illuminance_maximum
  illuminance_maximum_duration: !input illuminance_maximum_duration
  illuminance_on_transition: !input illuminance_on_transition
  illuminance_off_transition: !input illuminance_off_transition
  routine_sensor: !input routine_sensor
  control_reset_transition: !input control_reset_transition
  control_reset_trigger_routine_states: !input control_reset_trigger_routine_states
  control_reset_permitted_routine_states: !input control_reset_permitted_routine_states
  cover: !input cover
  cover_shading_position: !input cover_shading_position
  cover_shading_when_closing: !input cover_shading_when_closing

variables:
  adaptive_lighting_entities: |
    {{ integration_entities('adaptive_lighting') | select('in', area_entities(area)) | expand | selectattr('attributes.manual_control', 'defined') | map(attribute='entity_id') | list }}
  light_entities: |
    {% if area_lights %}
      {{ area_lights }}
    {% else %}
      {{ area_entities(area) | select('contains', 'light.') | reject('is_hidden_entity') | expand | map(attribute='entity_id') | list }}
    {% endif %}
  is_control_reset: |
    {{ trigger.id | default('') | contains('control_reset') }}
  lights_on_transition: |
    {% if trigger.id | default('') == 'illuminance' and illuminance_on_transition is not none %}
      {{ illuminance_on_transition }}
    {% elif is_control_reset and control_reset_transition is not none %}
      {{ control_reset_transition }}
    {% elif trigger.id | default('') == 'manual_on' and physical_control_transition is not none %}
      {{ physical_control_transition }}
    {% else %}
      {{ transition_on }}
    {% endif %}
  lights_off_transition: |
    {% if trigger.id | default('') == 'illuminance' and illuminance_off_transition is not none %}
      {{ illuminance_off_transition }}
    {% elif trigger.id | default('') == 'manual_off' and physical_control_transition is not none %}
      {{ physical_control_transition }}
    {% else %}
      {{ transition_off }}
    {% endif %}
  cover_position: "{{ state_attr(cover, 'current_position')|int(none) if cover else none}}"
  illuminance: "{{ states(illuminance_sensor)|int(none) }}"
  scene_expiration: |
    {{ as_timedelta(states(scene_timeout_helper)) or as_timedelta(scene_timeout) }}
  is_control_enabled: |
    {{ automatic_control_helper is none or is_state(automatic_control_helper, 'on') }}
  is_cover_shading: |
    {{
      cover_position|int(100) < cover_shading_position|int(0)
      or cover and cover_shading_when_closing and is_state(cover, 'closing') and states[cover].last_changed <= now() - as_timedelta(illuminance_minimum_duration)
    }}
  is_illuminance_low: "{{ illuminance|int(0) < illuminance_minimum|int(1) }}"
  is_illuminance_high: "{{ illuminance|int(0) > illuminance_maximum|int(0) }}"
  is_light_on: |
    {{ light_entities | map('states') | select('eq', 'on') | list | count > 0 }}
  is_occupied: "{{ is_state(occupancy_sensor, 'on') }}"
  is_scene_adaptive: |
    {{
      expand(adaptive_lighting_entities)
      | selectattr('attributes.manual_control', 'defined')
      | rejectattr('attributes.manual_control', 'equalto', none)
      | rejectattr('attributes.manual_control', 'equalto', [])
      | list | count > 0
    }}
  is_scene_saved: "{{ states[scene_entity].state is defined }}"
  is_scene_expired: |
    {{ is_scene_saved and states[scene_entity].last_updated is defined and states[scene_entity].last_updated < now() - as_timedelta(scene_expiration) }}

trigger:
  - trigger: state
    entity_id: !input occupancy_sensor
    to: "on"
    for:
      seconds: !input area_occupied_delay
    id: occupancy
  - trigger: state
    entity_id: !input occupancy_sensor
    to: "off"
    for:
      seconds: !input area_unoccupied_delay
    id: occupancy
  - trigger: state
    entity_id: !input automatic_control_helper
    to: "on"
    id: control_enabled
  - trigger: numeric_state
    entity_id: !input illuminance_sensor
    above: !input illuminance_maximum
    for:
      seconds: !input illuminance_maximum_duration
    id: illuminance
  - trigger: numeric_state
    entity_id: !input illuminance_sensor
    below: !input illuminance_minimum
    for:
      seconds: !input illuminance_minimum_duration
    id: illuminance
  - trigger: numeric_state
    entity_id: !input cover
    attribute: current_position
    below: !input cover_shading_position
    id: illuminance
  - trigger: numeric_state
    entity_id: !input cover
    attribute: current_position
    above: !input cover_shading_position
    id: illuminance
  - trigger: state
    entity_id: !input cover
    to: "closing"
    for:
      seconds: !input illuminance_minimum_duration
    id: illuminance
    enabled: !input cover_shading_when_closing
  - trigger: state
    entity_id: !input physical_control_lights
    to: "on"
    from: "off"
    id: manual_on
  - trigger: state
    entity_id: !input physical_control_lights
    to: "off"
    from: "on"
    id: manual_off
  - trigger: state
    entity_id: !input automatic_control_helper
    to: "off"
    for: !input automatic_control_reset_duration
    id: control_reset
    enabled: "{{ is_control_toggleable and automatic_control_reset_duration not in [none, '00:00:00'] }}"
  - trigger: state
    entity_id: !input occupancy_sensor
    to: "off"
    for: !input area_exit_control_reset_duration
    id: area_exit_control_reset
    enabled: "{{ is_control_toggleable and physical_control_lights and area_exit_control_reset_duration not in [none, '00:00:00'] }}"
  - trigger: state
    entity_id: !input routine_sensor
    to: !input control_reset_trigger_routine_states
    id: routine_control_reset
    enabled: "{{ is_control_toggleable }}"

condition:
  - condition: state
    entity_id: !input occupancy_sensor
    state:
      - "on"
      - "off"
  - condition: or
    conditions:
      - and:
          - condition: trigger
            id:
              - illuminance
              - occupancy
          - condition: template
            value_template: "{{ is_control_enabled }}"
      - and:
          - condition: trigger
            id:
              - control_enabled
          - alias: If the automation is not runnning
            condition: template
            value_template: "{{ this.attributes.current == 0 }}"
      - and:
          - condition: template
            value_template: "{{ is_control_reset }}"
          - or:
              - alias: If there are no routine restrictions
                condition: template
                value_template: |
                  {# The routine sensor or reset states are undefined #}
                  {{ routine_sensor is none or union(control_reset_permitted_routine_states or [], control_reset_trigger_routine_states or []) == [] }}
              - alias: If the routine is in a permitted reset state
                condition: template
                value_template: |
                  {{ is_state(routine_sensor, union(control_reset_permitted_routine_states or [], control_reset_trigger_routine_states or [])) }}
          - or:
              - not:
                  - condition: trigger
                    id:
                      - area_exit_control_reset
              - alias: The occupancy sensor turned off after the physical light and helper was turned off
                condition: template
                value_template: |
                  {% set physical_control_off_time = (expand(physical_control_lights) | selectattr('state', 'eq', 'off') | sort(attribute='last_changed') | last | default({'last_changed': none})).last_changed %}
                  {{
                    physical_control_off_time
                    and not is_control_enabled
                    and not is_occupied
                    and states[occupancy_sensor].last_changed > states[automatic_control_helper].last_changed >= physical_control_off_time
                  }}

      - and:
          - condition: trigger
            id:
              - manual_on
              - manual_off
          - condition: template
            alias: If the state was changed by an external action
            value_template: |
              {# Excludes any state changes that were instigated within Home Assistant (i.e. dashboards, automations, Adaptive Lighting). #}
              {{
                trigger.to_state.context.user_id is none
                and (
                  trigger.to_state.context.parent_id is none
                  and trigger.to_state.context.id is not search(':al:.*:.*:')
                  or trigger.to_state.context.parent_id == trigger.from_state.context.parent_id != none
                )
              }}

actions:
  - variables:
      create_saved_scene: &create_saved_scene
        action: scene.create
        metadata: {}
        data:
          snapshot_entities: |
            {# Excludes the manual control light from the light_entities list #}
            {{ light_entities | reject('eq', trigger.entity_id | default('')) | list if trigger.id | default('') == 'manual_off' else light_entities }}
          entities: |
            {# Sanitize a single value and return JSON-safe string #}
            {% macro sanitize_value(value) %}
              {% if value is string or value is number or value is boolean or value is none %}
                {{ value | to_json }}
              {% elif value is iterable and value is not mapping %}
                {{ value | map('string') | list | to_json }}
              {% elif value is mapping %}
                {{ sanitize_mapping(value) }}
              {% else %}
                {{ value | string | to_json }}
              {% endif %}
            {% endmacro %}

            {# Recursively sanitize a dict and return JSON string #}
            {% macro sanitize_mapping(map) %}
              {% set out = namespace(clean={}) %}
              {% for k, v in map.items() %}
                {% set out.clean = dict(out.clean, **{k: sanitize_value(v) | from_json}) %}
              {% endfor %}
              {{ out.clean | to_json }}
            {% endmacro %}

            {# Save the previous state and attributes of the manual control light #}
            {% if trigger.id | default('') == 'manual_off' and trigger.entity_id | default('') in light_entities %}
              {% set attrs = sanitize_mapping(trigger.from_state.attributes | default({})) | from_json %}
              {{ {trigger.entity_id: dict(attrs, state=trigger.from_state.state)} }}
            {% else %}
              {{ {} }}
            {% endif %}
          scene_id: "{{ scene_id }}"

      delete_saved_scene: &delete_saved_scene
        if:
          - alias: A saved scene exists
            condition: template
            value_template: "{{ is_scene_saved }}"
        then:
          - action: scene.delete
            metadata: {}
            data: {}
            target:
              entity_id: "{{ scene_entity }}"

      auto_lights_on_conditions: &auto_lights_on_conditions
        and:
          - not:
              - condition: trigger
                id: manual_off
          - condition: state
            entity_id: !input occupancy_sensor
            state: "on"
            for:
              seconds: !input area_occupied_delay
          - condition: template
            value_template: "{{ not is_light_on }}"
          - or:
              - condition: template
                value_template: "{{ is_cover_shading }}"
              - condition: template
                value_template: "{{ is_illuminance_low }}"

      auto_lights_off_conditions: &auto_lights_off_conditions
        and:
          - not:
              - condition: trigger
                id: manual_on
          - condition: template
            value_template: "{{ is_light_on }}"
          - or:
              - condition: state
                entity_id: !input occupancy_sensor
                state: "off"
                for:
                  seconds: !input area_unoccupied_delay
              - and:
                  - condition: template
                    value_template: "{{ not is_cover_shading }}"
                  - condition: template
                    value_template: "{{ is_illuminance_high }}"

      lights_on_action: &lights_on_action
        sequence:
          - alias: Restore scene or turn lights on
            choose:
              - alias: A valid saved scene exists
                conditions:
                  - condition: template
                    value_template: "{{ is_scene_saved }}"
                  - condition: template
                    value_template: "{{ not is_scene_expired }}"
                sequence:
                  - action: scene.turn_on
                    metadata: {}
                    target:
                      entity_id: "{{ scene_entity }}"
                    data:
                      transition: "{{ lights_on_transition }}"
              - alias: A scene is used to turn on the lights
                conditions:
                  - condition: template
                    value_template: "{{ lights_on_scene is not none }}"
                sequence:
                  - action: scene.turn_on
                    metadata: {}
                    target:
                      entity_id: "{{ lights_on_scene }}"
                    data:
                      transition: "{{ lights_on_transition }}"
            default:
              - action: light.turn_on
                metadata: {}
                data:
                  transition: "{{ lights_on_transition }}"
                target:
                  entity_id: "{{ light_entities }}"
          - *delete_saved_scene

      lights_off_action: &lights_off_action
        sequence:
          - alias: Save the scene if lights are manually controlled
            if:
              - alias: If lighting is under manual control
                condition: template
                value_template: "{{ not is_scene_adaptive }}"
            then:
              - *create_saved_scene
            else:
              - *delete_saved_scene
          - choose:
              - alias: A scene is used to turn off the lights
                conditions:
                  - condition: template
                    value_template: "{{ lights_off_scene is not none }}"
                sequence:
                  - action: scene.turn_on
                    metadata: {}
                    target:
                      entity_id: "{{ lights_off_scene }}"
                    data:
                      transition: "{{ lights_off_transition }}"
            default:
              - action: light.turn_off
                metadata: {}
                data:
                  transition: "{{ lights_off_transition }}"
                target:
                  entity_id: "{{ light_entities }}"

  - alias: Control lights
    choose:
      - alias: Lights on
        conditions:
          - or:
              - condition: trigger
                id: manual_on
              - *auto_lights_on_conditions
        sequence:
          - *lights_on_action
      - alias: Lights off
        conditions:
          - or:
              - condition: trigger
                id: manual_off
              - *auto_lights_off_conditions
        sequence:
          - *lights_off_action

  - alias: Update control helper
    choose:
      - alias: Automatic control reset
        conditions:
          - condition: template
            value_template: "{{ is_control_reset }}"
        sequence:
          - action: homeassistant.turn_on
            metadata: {}
            data: {}
            target:
              entity_id: "{{ automatic_control_helper }}"
      - alias: Turn off automatic control
        conditions:
          - condition: trigger
            id: manual_off
          - condition: template
            value_template: "{{ is_control_enabled }}"
          - condition: template
            value_template: "{{ is_occupied }}"
        sequence:
          - action: homeassistant.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: "{{ automatic_control_helper }}"
      - alias: Turn on automatic control
        conditions:
          - condition: trigger
            id: manual_on
          - condition: template
            value_template: "{{ not is_control_enabled }}"
        sequence:
          - action: homeassistant.turn_on
            metadata: {}
            data: {}
            target:
              entity_id: "{{ automatic_control_helper }}"

mode: restart
