blueprint:
  name: Dimmer Power on Minimum
  description: "Automatically set lights to a minimum brightness when turning on, with configurable minimums per light entity"
  domain: automation
  source_url: https://raw.githubusercontent.com/jeverley/home-assistant-blueprints/refs/heads/main/blueprints/automation/lighting_brightness_on_min.yaml
  input:
    light_config:
      name: Lights configuration
      description: "Configure minimum brightness percentage and cooldown duration for each light"
      selector:
        object:
          label_field: light
          multiple: true
          fields:
            light:
              label: Light
              selector:
                entity:
                  multiple: false
                  filter:
                    - domain:
                        - light
            min_pct:
              label: Power on minimum brightness
              selector:
                number:
                  min: 1
                  max: 100
                  unit_of_measurement: "%"
            cooldown:
              label: Cooldown duration
              selector:
                number:
                  min: 0
                  max: 60
                  step: 1
                  unit_of_measurement: s
      default: []
    default_transition:
      name: Default transition
      description: "Default transition time when not specified in the trigger event"
      default: 0
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: s

trigger_variables:
  scale_factor: 2.55
  transition_default: !input default_transition
  light_config_objects: !input light_config
  light_config: |
    {% set global = namespace(dict={}) %}
    {% for config in light_config_objects %}
      {% set global.dict = dict(global.dict, **{
        config.light: {
          'on_minimum': (config.min_pct * scale_factor) | round,
          'cooldown': config.cooldown
        }
      }) %}
    {% endfor %}
    {{ global.dict }}

variables:
  trigger_time: |
    {% if trigger.event is defined %}
    {{ trigger.event.time_fired }}
    {% elif trigger.to_state is defined %}
    {{ trigger.to_state.last_changed }}
    {% else %}
    {{ now() }}
    {% endif %}
  trigger_entity_ids: |
    {% if trigger.to_state is defined %}
      {# Single entity_id from state change trigger #}
      {{ [trigger.to_state.entity_id] }}
    {% elif trigger.event is defined %}
      {# Determine event target lights #}
      {% set entity_ids = [trigger.event.data.service_data.entity_id | default([])] | flatten %}
      {% set device_ids = [trigger.event.data.service_data.device_id | default([])] | flatten %}
      {% set area_ids = [trigger.event.data.service_data.area_id | default([])] | flatten %}
      {% set floor_ids = [trigger.event.data.service_data.floor_id | default([])] | flatten %}
      {% set label_ids = [trigger.event.data.service_data.label_id | default([])] | flatten %}
      {% set resolved_entities =
        (
          (area_ids|map('area_entities')|flatten if area_ids else [])
          + (floor_ids|map('floor_entities')|flatten if floor_ids else [])
          + (label_ids|map('label_entities')|flatten if label_ids else [])
          + (label_ids|map('label_devices')|flatten|map('device_entities')|flatten if label_ids else [])
        ) | select('contains', 'light.') | list
      %}
      {{ (resolved_entities + entity_ids) | unique | list }}
    {% else %}
    {{ [] }}
    {% endif %}
  target_entity_ids: |
    {{ trigger_entity_ids | select('in', light_config) | list }}
  brightness: |
    {% if trigger.to_state is defined %}
      {{ trigger.to_state.attributes.brightness|default(none)|int(none) }}
    {% elif trigger.event is not defined %}
      {{ none }}
    {% elif trigger.event.data.service_data.brightness is defined %}
      {{ trigger.event.data.service_data.brightness|int(none) }}
    {% elif trigger.event.data.service_data.brightness_pct is defined %}
      {{ (trigger.event.data.service_data.brightness_pct|int(none) * scale_factor) | round }}
    {% else %}
      {{ none }}
    {% endif %}
  transition: |
    {{
      trigger.event.data.service_data.transition|default(transition_default)|int(0)
      if trigger.event is defined
      else 0
    }}

triggers:
  - alias: When call_service event is fired for light turn_on
    id: call_service
    trigger: event
    event_type: call_service
    event_data:
      domain: light
      service: turn_on
  - alias: When call_service event is fired for light toggle
    id: call_service
    trigger: event
    event_type: call_service
    event_data:
      domain: light
      service: toggle
  - trigger: event
    id: state_changed
    event_type: state_changed
    event_data: {}
    enabled: false

conditions:
  - condition: or
    conditions:
      - alias: If triggered by call service
        condition: and
        conditions:
          - condition: trigger
            id:
              - call_service
          - alias: If a light with a power on minimum % was off
            condition: template
            value_template: |
              {{ target_entity_ids | select('is_state', 'off') | list | count > 0 }}
          - condition: or
            conditions:
              - alias: If transition > 1
                condition: template
                value_template: |
                  {{ transition > 1 }}
              - alias: |
                  If the event brightness is unknown or below the power on minimum %
                condition: template
                value_template: |
                  {% if not brightness %}
                    {{ true }}
                  {% else %}
                    {% set global = namespace(result=false) %}
                    {% for entity_id in target_entity_ids %}
                      {% if not global.result %}
                        {% set global.result = brightness < light_config[entity_id].on_minimum %}
                      {% endif %}
                    {% endfor %}
                    {{ global.result }}
                  {% endif %}

      - alias: If triggered by state change
        condition: and
        conditions:
          - condition: trigger
            id:
              - state_changed
          - alias: If the trigger light has a power on minimum %
            condition: template
            value_template: "{{ not not target_entity_ids }}"
          - alias: If the light was previously off and has a target brightness
            condition: template
            value_template: |
              {{ trigger.from_state.state == 'off' and brightness|int(0) > 0 }}

actions:
  - alias: If triggered by call service and target brightness is unspecified
    if:
      - condition: trigger
        id:
          - call_service
      - condition: template
        value_template: "{{ brightness is none }}"
    then:
      - alias: Wait for the target states to update
        wait_template: |
          {{ expand(target_entity_ids) | map(attribute='last_changed') | sort | first > as_datetime(trigger_time) }}
        continue_on_timeout: true
        timeout: "00:00:01"

  - alias: Determine lights with target brightness below on minimum %
    variables:
      entity_brightness: |
        {% set global = namespace(brightness={}) %}
        {% for entity_id in target_entity_ids %}
          {% set target_brightness = brightness if brightness else state_attr(entity_id, 'brightness')|int(none) %}
          {% set global.brightness = dict(global.brightness, **{entity_id: target_brightness}) %}
        {% endfor %}
        {{ global.brightness }}
      transition_remaining: |
        {{ (timedelta(seconds=transition) - (now() - as_datetime(trigger_time))).total_seconds() }}
      transition_pct: |
        {{ min(1 - transition_remaining / transition, 1) if transition > 0 else 1 }}
      target_entity_ids: |
        {# Include lights that are below their on minimum % #}
        {% set global = namespace(entity_ids=[]) %}
        {% for entity_id, brightness in entity_brightness.items() %}
          {% if brightness and brightness * transition_pct < light_config[entity_id].on_minimum %}
            {% set global.entity_ids = global.entity_ids + [entity_id] %}
          {% endif %}
        {% endfor %}
        {{ global.entity_ids }}

  - alias: Stop if all lights are above their on minimum brightness
    if:
      - condition: template
        value_template: "{{ target_entity_ids | count == 0 }}"
    then:
      - stop: All lights are above their on minimum brightness

  - alias: Apply the on minimum for each light
    variables:
      off_duration: |
        {% if trigger.from_state is defined %}
          {{ {trigger.entity_id: (now() - as_datetime(trigger.from_state.last_changed))|string if trigger.from_state.state == 'off' else none} }}
        {% else %}
          {% set global = namespace(off_duration={}) %}
          {% for entity_id in target_entity_ids %}
            {% set off_duration = (now() - states[entity_id].last_changed)|string if is_state(entity_id, 'off') else none %}
            {% set global.off_duration = dict(global.off_duration, **{entity_id: off_duration}) %}
          {% endfor %}
          {{ global.off_duration }}
        {% endif %}
      scene_on_minimum: |
        {# Cool lights get a shorter transition #}
        {% set global = namespace(cool={}, warm={}) %}
        {% for entity_id in target_entity_ids %}
          {% set cooldown = timedelta(seconds=light_config[entity_id].cooldown|default(0)) %}
          {% if as_timedelta(off_duration[entity_id] or '0') > cooldown %}
            {% set global.cool = dict(global.cool, **{entity_id: {'state': 'on', 'brightness': light_config[entity_id].on_minimum}}) %}
          {% else %}
            {% set global.warm = dict(global.warm, **{entity_id: {'state': 'on', 'brightness': light_config[entity_id].on_minimum}}) %}
          {% endif %}
        {% endfor %}
        {{ {'cool': global.cool, 'warm': global.warm} }}
  - parallel:
      - alias: Apply cool lights minimum brightness
        if:
          - condition: template
            value_template: "{{ scene_on_minimum.cool | count > 0 }}"
        then:
          - action: scene.apply
            data:
              entities: "{{ scene_on_minimum.cool }}"
              transition: 0
      - alias: Apply warm lights minimum brightness
        if:
          - condition: template
            value_template: "{{ scene_on_minimum.warm | count > 0 }}"
        then:
          - action: scene.apply
            data:
              entities: "{{ scene_on_minimum.warm }}"
              transition: 1
  - delay:
      milliseconds: 500

  - alias: Apply interim brightness to resume transition
    variables:
      transition_remaining: |
        {{ (timedelta(seconds=transition) - (now() - as_datetime(trigger_time))).total_seconds() }}
      transition_pct: |
        {{ min(1 - transition_remaining / transition, 1) if transition > 0 else 1 }}
      scene_interim: |
        {% set global = namespace(scene_entities={}) %}
        {% for entity_id in target_entity_ids %}
          {# Determine interim brightness from remaining transition #}
          {% set interim_brightness = (entity_brightness[entity_id] * transition_pct)|round() %}
          {% set global.scene_entities = dict(global.scene_entities, **{entity_id: {'state': 'on', 'brightness': interim_brightness}}) %}
        {% endfor %}
        {{ global.scene_entities }}
  - action: scene.apply
    data:
      entities: "{{ scene_interim }}"
      transition: 0

  - variables:
      transition_remaining: |
        {{ (timedelta(seconds=transition) - (now() - as_datetime(trigger_time))).total_seconds() }}
      transition: |
        {{ max(transition_remaining|round(), 0) }}
      target_entity_ids: |
        {{ target_entity_ids | reject('is_state', 'off') | list }}
  - alias: Apply the original brightness
    if:
      - alias: If brightness is not none
        condition: template
        value_template: "{{ brightness is not none }}"
    then:
      - action: light.turn_on
        data:
          brightness: "{{ brightness }}"
          transition: "{{ transition }}"
        target:
          entity_id: |
            {{ target_entity_ids }}
    else:
      - variables:
          scene_final: |
            {% set global = namespace(scene_entities={}) %}
            {% for entity_id in target_entity_ids %}
              {% set global.scene_entities = dict(global.scene_entities, **{entity_id: {'state': 'on', 'brightness': entity_brightness[entity_id]}}) %}
            {% endfor %}
            {{ global.scene_entities }}
      - action: scene.apply
        data:
          entities: "{{ scene_final }}"
          transition: "{{ transition }}"
      - alias: Wait for the original transition to complete
        delay:
          seconds: |
            {{ max((timedelta(seconds=transition) - (now() - as_datetime(trigger_time))).total_seconds(), 0) }}
      - action: adaptive_lighting.apply
        continue_on_error: true
        data:
          lights: "{{ target_entity_ids }}"

mode: parallel
trace:
  stored_traces: 10
max: 20
