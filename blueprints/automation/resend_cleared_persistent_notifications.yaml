blueprint:
  name: Resend Cleared Persistent Notification
  description: Resends a cleared persistent notification to all mobile app devices associated with the person who cleared it.
  domain: automation

trigger:
  - platform: event
    event_type: mobile_app_notification_cleared
    event_data:
      persistent: "true"

variables:
  person_entity: >-
    {{ integration_entities('person') | select('is_state_attr', 'user_id', trigger.event.context.user_id) | list | first }}
  mobile_app_entities: >-
    {{ state_attr(person_entity, 'device_trackers') | select('in', integration_entities('mobile_app')) | list }}
  device_name_slugs: >-
    {{ mobile_app_entities | map('device_attr', 'name') | map('slugify', separator='_') | list }}

  actions: >
    {% set source = trigger.event.data %}
    {% set ns = namespace(actions=[], indices=[]) %}
    {% for key in source %}
      {% if key.startswith('action_') and key.split('_') | length > 2 %}
        {% set idx = key.split('_')[1] %}
        {% if idx not in ns.indices %}
          {% set ns.indices = ns.indices + [idx] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {% for idx in ns.indices | sort %}
      {% set action_ns = namespace(pairs=[]) %}
      {% for key in source %}
        {% if key.startswith('action_' ~ idx ~ '_') %}
          {% set field = key[('action_' ~ idx ~ '_') | length:] %}
          {% set field = 'action' if field == 'key' else field %}
          {% set value = source[key] %}
          {% set action_ns.pairs = action_ns.pairs + [[field, value]] %}
        {% endif %}
      {% endfor %}
      {% set ns.actions = ns.actions + [dict(action_ns.pairs)] %}
    {% endfor %}
    {{ ns.actions }}

  data: >
    {% set source = trigger.event.data %}
    {% set ns = namespace(pairs=[]) %}
    {% for key, value in source.items() %}
      {% if not key.startswith('action_') %}
        {% set ns.pairs = ns.pairs + [[key, value]] %}
      {% endif %}
    {% endfor %}
    {% set ns.pairs = ns.pairs + [['actions', actions]] %}
    {% set ns.pairs = ns.pairs + [['alert_once', true]] %}
    {{ dict(ns.pairs) }}

action:
  - repeat:
      for_each: "{{ device_name_slugs }}"
      sequence:
        - service: "{{ 'notify.mobile_app_' ~ repeat.item }}"
          data:
            title: "{{ data.title|default(none) }}"
            message: "{{ data.message }}"
            data: "{{ data }}"

mode: parallel
max: 100