blueprint:
  name: EV Charger Free Electricity Override
  description: >
    Starts a charge override during free electricity sessions if the EV charger is in Smart mode
    and the cost of starting early is lower than the cost of missing the sync window.
  domain: automation
  input:
    event_calendar:
      name: Free Electricity Session Calendar
      selector:
        entity:
          domain:
            - calendar
    ev_mode_sensor:
      name: EV Charger Mode Sensor
      selector:
        entity:
          domain: sensor
    current_rate_sensor:
      name: Current Electricity Rate Sensor
      selector:
        entity:
          domain: sensor
    next_rate_sensor:
      name: Next Electricity Rate Sensor
      selector:
        entity:
          domain: sensor
    last_message_sensor:
      name: EV Charger Last Message Timestamp
      selector:
        entity:
          domain: sensor
    override_end_sensor:
      name: Charge Override End Time Sensor
      selector:
        entity:
          domain: sensor
    ev_rate_kwh:
      name: EV Charger Rate (kWh)
      default: 7
      selector:
        number:
          min: 1
          max: 22
          unit_of_measurement: kWh
          mode: slider
    ev_interval_minutes:
      name: EV Sync Interval (minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: minutes
          mode: slider
    min_duration_seconds:
      name: Minimum Override Duration (seconds)
      default: 60
      selector:
        number:
          min: 10
          max: 3600
          unit_of_measurement: seconds
          mode: slider
    end_offset_seconds:
      name: Session End Offset (seconds)
      default: 10
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: seconds
          mode: slider

trigger_variables:
  event_calendar: !input event_calendar
  ev_mode_sensor: !input ev_mode_sensor
  current_rate_sensor: !input current_rate_sensor
  next_rate_sensor: !input next_rate_sensor
  last_message_sensor: !input last_message_sensor
  override_end_sensor: !input override_end_sensor
  ev_rate_kwh: !input ev_rate_kwh

variables:
  ev_interval_minutes: !input ev_interval_minutes
  min_duration_seconds: !input min_duration_seconds
  end_offset_seconds: !input end_offset_seconds

  ev_interval: "{{ timedelta(minutes=ev_interval_minutes) }}"
  min_duration: "{{ timedelta(seconds=min_duration_seconds) }}"
  end_offset: "{{ timedelta(seconds=end_offset_seconds) }}"
  config_entry_id: "{{ config_entry_id(ev_mode_sensor) }}"
  event_end: |
    {{ as_datetime(state_attr(event_calendar, 'end_time'), none) }}
  duration: |
    {{ (event_end - now() - end_offset) if event_end else timedelta(0) }}

mode: single

triggers:
  - alias: Cost-based sync window trigger
    id: Start
    platform: template
    value_template: >-
      {% set start = as_datetime(state_attr(event_calendar, 'start_time'), none) %}
      {% set current_kwh_cost = float(states(current_rate_sensor), none) %}
      {% set ev_last_update = as_datetime(states(last_message_sensor)) %}

      {% if not start %}
        {{ false }}
      {% elif start <= now() %}
        {{ true }}
      {% elif ev_last_update and current_kwh_cost is not none %}
        {% set ev_update_1 = ev_last_update + ev_interval %}
        {% set ev_update_2 = ev_last_update + ev_interval * 2 %}

        {% if ev_update_1 < start < ev_update_2 %}
          {% set next_kwh_cost = float(states(next_rate_sensor), none) %}
          {% set min_kwh_cost = min(current_kwh_cost, next_kwh_cost) if next_kwh_cost is not none else current_kwh_cost %}
          {% set missed_time = ev_update_2 - start %}
          {% set missed_kwh = missed_time.total_seconds() / 3600 * ev_rate_kwh %}
          {% set missed_min_cost = missed_kwh * min_kwh_cost %}
          {% set early_time = start - ev_update_1 %}
          {% set early_kwh = early_time.total_seconds() / 3600 * ev_rate_kwh %}
          {% set early_cost = early_kwh * current_kwh_cost %}
          {{ early_cost < missed_min_cost }}
        {% else %}
          {{ false }}
        {% endif %}
      {% endif %}
  - alias: Schedule mode change trigger
    id: ModeChange
    platform: state
    entity_id: !input ev_mode_sensor
    to: Smart

conditions:
  - alias: If the EV charger is in schedule mode
    condition: state
    entity_id: !input ev_mode_sensor
    state: Smart
  - alias: No override or event ends after current override
    condition: template
    value_template: >-
      {% set override_end = as_datetime(states(override_end_sensor), none) %}
      {{ override_end is none or (event_end and event_end > override_end + end_offset) }}
  - condition: or
    conditions:
      - alias: If there is an active event
        condition: state
        entity_id: !input event_calendar
        state: "on"
      - condition: trigger
        id: Start

action:
  - alias: Start a charge override for the remainder of the free energy session
    if:
      - alias: If the duration is longer than the minimum
        condition: template
        value_template: "{{ duration > min_duration }}"
    then:
      - service: pod_point.charge_now
        data:
          config_entry_id: "{{ config_entry_id }}"
          seconds: "{{ duration.total_seconds() | int % 60 }}"
          minutes: "{{ (duration.total_seconds() | int % 3600) // 60 }}"
          hours: "{{ duration.total_seconds() | int // 3600 }}"
